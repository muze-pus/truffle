scalar Address
scalar NetworkId
scalar TransactionHash
scalar Value
scalar Bytes
scalar Object
scalar ByteOffset
scalar FileIndex

type Project {
  directory: String!
  contract(name: String!): Contract
  network(name: String!): Network
  resolve(type: String, name: String): [NameRecord] # null means unknown type
}

type NameRecord {
  name: String!
  type: String!
  resource: Named!
  previous: NameRecord
}

interface Named {
  name: String!
}

type ContractInstance {
  address: Address!
  network: Network!
  creation: ContractInstanceCreation
  callBytecode: LinkedBytecode!
  contract: Contract
}

type ContractInstanceCreation {
  transactionHash: TransactionHash
  constructorArgs: [Value]
  constructor: Constructor
}

type Constructor {
  createBytecode: LinkedBytecode
}

type Contract implements Named {
  name: String!
  source: Source
  abi: ABI
  compilation: Compilation
  processedSource: ProcessedSource
  createBytecode: Bytecode
  callBytecode: Bytecode
}

type ABI {
  json: String!
  items: [AbiItem]
}

# stub
type AbiItem {
  type: String
}

type ProcessedSource {
  source: Source!
  contracts: [Contract]!
  ast: AST
}

type AST {
  json: String!
}

type Network implements Named {
  name: String!
  networkId: NetworkId!
  historicBlock: Block!
  fork: Network
}

type Block {
  height: Int!
  hash: String!
}

type LinkValue {
  linkReference: LinkReference!
  value: Bytes
}

type LinkedBytecode {
  bytecode: Bytecode!
  linkValues: [LinkValue]!
}

type LinkReference {
  offsets: [ByteOffset!]!
  name: String
  length: Int!
}

type Bytecode {
  bytes: Bytes!
  instructions: [Instruction!],
  linkReferences: [LinkReference]
}

type Instruction {
  opcode: Int!,
  programCounter: String!,
  meta: InstructionMeta,
  sourceRange: SourceRange,
  pushData: String
}

type InstructionMeta {
  cost: Int!,
  dynamic: Boolean,

  # stack operations
  pops: Int,
  pushes: Int
}

type SourceRange {
  source: Source!
  start: ByteOffset!
  length: Int!
  meta: SourceRangeMeta!
}

type Source {
  sourcePath: String
  contents: String!
}

type SourceMap {
  json: String!
}

type Compilation {
  compiler: Compiler!
  sources: [Source]!
  processedSources: [ProcessedSource]!
  sourceMaps: [SourceMap]
}

type Compiler {
  name: String!
  version: String!
  settings: Object
}

type SourceRangeMeta {
  jump: JumpDirection
}

enum JumpDirection {
  IN
  OUT
}
