const polygonDataSol =
  '// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.9;\r\n// import "hardhat/console.sol";\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), "Ownable: caller is not the owner");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), "Ownable: new owner is the zero address");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\'s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\'s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\'s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\'s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn\'t required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``\'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n    }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");\r\n        unchecked {\r\n    _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n    }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), "ERC20: transfer from the zero address");\r\n        require(recipient != address(0), "ERC20: transfer to the zero address");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");\r\n        unchecked {\r\n    _balances[sender] = senderBalance - amount;\r\n    }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), "ERC20: mint to the zero address");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), "ERC20: burn from the zero address");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");\r\n        unchecked {\r\n    _balances[account] = accountBalance - amount;\r\n    }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), "ERC20: approve from the zero address");\r\n        require(spender != address(0), "ERC20: approve to the zero address");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``\'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, "Address: insufficient balance");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }("");\r\n        require(success, "Address: unable to send value, recipient may have reverted");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, "Address: low-level call failed");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /*\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n     \r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, "Address: insufficient balance for call");\r\n        require(isContract(target), "Address: call to non-contract");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, "Address: low-level static call failed");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), "Address: static call to non-contract");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), "Address: delegate call to non-contract");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\ninterface IGrowthVault {\r\n    function strategy() external view returns (address);\r\n    function deposit(uint256 _amount) external;\r\n    function earn() external;\r\n    function getCurrentStrategy() external view returns (\r\n        address _liquidityRouter,\r\n        address _lpToken,\r\n        address _token1,\r\n        address _token0,\r\n        address _farm,\r\n        uint256 _pid\r\n    );\r\n}\r\n\r\n\r\ninterface Ifarm {\r\n    function DINO() external view returns (address);\r\n    function deposit(uint256 _pid, uint256 _amount) external;\r\n    function withdraw(uint256 _pid, uint256 _amount) external;\r\n    function userInfo(uint256 _pid, address _user) external view returns (uint256, uint256);\r\n    function pendingSushi(uint256 _pid, address _user) external view returns (uint256);\r\n    function leaveStaking(uint256 _amount) external;\r\n    function emergencyWithdraw(uint256 _pid) external;\r\n    function poolInfo(uint256) external view returns(address lpToken, uint allocPoint, uint lastRewardBlock, uint accSpiritPerShare, uint16 depositFeeBP);\r\n}\r\n\r\ninterface IfarmWOpid {\r\n    struct Profit {\r\n        uint usd;\r\n        uint hunny;\r\n        uint bnb;\r\n    }\r\n\r\n    struct APY {\r\n        uint usd;\r\n        uint hunny;\r\n        uint bnb;\r\n    }\r\n\r\n    struct UserInfo {\r\n        uint balance;\r\n        uint principal;\r\n        uint available;\r\n        Profit profit;\r\n        uint poolTVL;\r\n        APY poolAPY;\r\n    }\r\n\r\n    function deposit(uint256 _amount) external;\r\n    function withdraw(uint256 _amount) external;\r\n    function userInfo(uint256 _pid, address _user) external view returns (uint256, uint256);\r\n    function pendingSushi(address _user) external view returns (uint256);\r\n    function emergencyWithdraw(uint256 _pid) external;\r\n    function info(address account) external view returns (UserInfo memory);\r\n}\r\n\r\n\r\ninterface IRouter {\r\n    function factory() external view returns (address);\r\n    function WETH() external view returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\ninterface IPair {\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112, uint112, uint32);\r\n    function totalSupply() external view returns (uint256);\r\n    function mint(address to) external returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity\'s arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it\'s recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\'s `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, "SafeMath: addition overflow");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\'s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, "SafeMath: subtraction overflow");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\'s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\'s `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\r\n        // benefit is lost if \'b\' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, "SafeMath: multiplication overflow");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\'s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, "SafeMath: division by zero");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\'s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, "SafeMath: modulo by zero");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // \'safeIncreaseAllowance\' and \'safeDecreaseAllowance\'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            "SafeERC20: approve from non-zero to non-zero allowance"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity\'s return data size checking mechanism, since\r\n        // we\'re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\r\n        }\r\n    }\r\n}\r\n\r\nlibrary TransferHelper {\r\n    function safeTransferBNB(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, \'TransferHelper::safeTransferBNB: BNB transfer failed\');\r\n    }\r\n}\r\n\r\ninterface IWBNB {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n\r\n\r\n/**\r\n * @dev Implementation of a vault to deposit funds for yield optimizing.\r\n * This is the contract that receives funds and that users interface with.\r\n * The yield optimizing strategy itself is implemented in a separate \'Strategy.sol\' contract.\r\n */\r\ncontract GrowthVault is ERC20, Ownable {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;                \r\n    \r\n    struct StrategyInfo {\r\n        address liquidityRouter;\r\n        address lpToken;\r\n        uint256 pid;\r\n        uint256 totalLP;\r\n        uint256 totalCapital;\r\n        address farm;\r\n        address token0;\r\n        address token1;\r\n    }\r\n\r\n    // Info of each strategy for LP tokens.\r\n    // nameID, strategy obj\r\n    mapping(uint256 => StrategyInfo) private strategyInfo;\r\n    mapping(address => uint256) private requestBlock;\r\n    mapping(uint256 => bool) private nameExist;\r\n    uint256[] private names;\r\n\r\n    uint256 public constant withdrawFee = 15; // 15%\r\n    uint256 public constant toleranceLevelPercent = 1; // 1% \r\n    uint256 public totalFeeUSDT;\r\n    uint256 public REQUIRED_NUMBER_OF_BLOCKS = 4;\r\n    address public government;\r\n    address public YELtoken;\r\n    address public yelLiquidityRouter;\r\n    address public USDT;\r\n\r\n    uint256 private pid;\r\n    uint256 private nameID;\r\n    uint256 private constant NONE_PID_VALUE = 999999;\r\n    uint256 private constant differencePercent = 1; // 1%\r\n    address private farm;\r\n    address private token0;\r\n    address private token1;\r\n    address private WETH;\r\n    address private liquidityRouter;\r\n    uint256 public pendingFee; // in native tokens\r\n    uint256 public pendingFeeInCakes;\r\n    address private lpToken;\r\n\r\n    // TODO: remove strategy\r\n    // TODO: userСapital добавить при каждом вводе кошелька пользователя и вывести в WBNB\r\n\r\n    event YELswapped(uint256 percent);\r\n    event DepositToVault(uint256 amount);\r\n    event WithdrawFromVault(uint256 amount);\r\n    event Earn(uint256 amount);\r\n    event PartialMigrate(uint256 amount);\r\n    event Migrate(uint256 amount);\r\n    event AutoCompound();\r\n\r\n    modifier onlyOwnerOrGovernment() {\r\n        require(\r\n            owner() == _msgSender() || government == _msgSender(),\r\n            "Ownable: caller is not the owner or government"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier canWithdraw() {\r\n        uint256 currentBlock = block.number;\r\n        if(requestBlock[msg.sender] == 0) {\r\n            requestBlock[msg.sender] = currentBlock;\r\n        } else if(currentBlock - requestBlock[msg.sender] >= REQUIRED_NUMBER_OF_BLOCKS) {\r\n            _;\r\n        } else {\r\n            revert("Difference of blocks is less then REQUIRED_NUMBER_OF_BLOCKS");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the value of {token} to the token that the vault will\r\n     * hold as underlying value. It initializes the vault\'s own token.\r\n     * This token is minted when someone does a deposit. It is burned in order\r\n     * to withdraw the corresponding portion of the underlying assets.\r\n     */\r\n    constructor(\r\n        string memory name__,\r\n        string memory symbol__,\r\n        address _lpToken,\r\n        uint256 _pid,\r\n        uint256 _nameID,\r\n        address _farm,\r\n        address _liquidityRouter,\r\n        address _USDT,\r\n        address _YELtoken,\r\n        address _yelLiquidityRouter) ERC20(name__, symbol__) {\r\n        require(_lpToken != address(0), "The address of lp token can not be a zero address");\r\n        require(_farm != address(0), "The address of farm can not be a zero address");\r\n        require(_liquidityRouter != address(0), "The address of liquidityRouter can not be a zero address");\r\n        require(_YELtoken != address(0), "The address of YELtoken can not be a zero address");\r\n        \r\n        _setBaseAddresses(_farm, _liquidityRouter, _lpToken, _pid, _nameID);\r\n\r\n        yelLiquidityRouter = _yelLiquidityRouter;\r\n        YELtoken = _YELtoken;\r\n        WETH = IRouter(_liquidityRouter).WETH();\r\n        USDT = _USDT;\r\n    }\r\n\r\n    function getCurrentStrategy() public view returns (\r\n        address _liquidityRouter,\r\n        address _lpToken,\r\n        address _token1,\r\n        address _token0,\r\n        address _farm,\r\n        uint256 _pid) {\r\n        _liquidityRouter = liquidityRouter;\r\n        _lpToken = lpToken;\r\n        _token1 = token1;\r\n        _token0 = token0;\r\n        _farm = farm;\r\n        _pid = pid;\r\n    }\r\n\r\n    function getNamesOfStrategies() public view returns (uint256[] memory) {\r\n        return names;\r\n    }\r\n\r\n    function getStrategyInfo(uint256 _nameID) public view returns (\r\n        address _liquidityRouter,\r\n        address _lpToken,\r\n        address _token1,\r\n        address _token0,\r\n        address _farm,\r\n        uint256 _pid) {\r\n\r\n        StrategyInfo memory strategyObj = strategyInfo[_nameID];\r\n        _liquidityRouter = strategyObj.liquidityRouter;\r\n        _lpToken = strategyObj.lpToken;\r\n        _token1 = strategyObj.token1;\r\n        _token0 = strategyObj.token0;\r\n        _farm = strategyObj.farm;\r\n        _pid = strategyObj.pid;\r\n    }\r\n\r\n    function updateTotalCapital() public returns (uint256) {\r\n        uint256 totalCapital = 0;\r\n        uint256 _nameID;\r\n        StrategyInfo storage strategyObj;\r\n        uint256 totalLP;\r\n        uint256 _token0Value;\r\n        uint256 _token1Value;\r\n        uint256[] memory amounts;\r\n        address[] memory path = new address[](2);\r\n\r\n        for (uint256 i; i < names.length; i++) {\r\n            _nameID = names[i];\r\n            strategyObj = strategyInfo[_nameID];\r\n            if(strategyObj.pid < NONE_PID_VALUE) {\r\n                totalLP = _getAmountLPFromStrategy(strategyObj.farm, strategyObj.pid);\r\n            } else {\r\n                totalLP = _getAmountLPFromStrategyWOpid(strategyObj.farm);\r\n            }\r\n            \r\n            if(totalLP > 0) {\r\n                (_token0Value, _token1Value) = _getTokenValues(strategyObj.lpToken, totalLP);\r\n\r\n                // calculates how many nativeToken for tokens\r\n                path[1] = WETH;\r\n                if(strategyObj.token0 == WETH) {\r\n                    path[0] = strategyObj.token1;\r\n                    amounts = IRouter(strategyObj.liquidityRouter).getAmountsOut(_token1Value, path);\r\n                    strategyObj.totalCapital = amounts[1];\r\n                    totalCapital += strategyObj.totalCapital;\r\n                } else if (strategyObj.token1 == WETH) {\r\n                    path[0] = strategyObj.token0;\r\n                    amounts = IRouter(strategyObj.liquidityRouter).getAmountsOut(_token0Value, path);\r\n                    strategyObj.totalCapital = amounts[1];\r\n                    totalCapital += strategyObj.totalCapital;\r\n                } else {\r\n                    path[0] = strategyObj.token0;\r\n                    amounts = IRouter(strategyObj.liquidityRouter).getAmountsOut(_token0Value, path);\r\n                    strategyObj.totalCapital = amounts[1];\r\n                    totalCapital += strategyObj.totalCapital;\r\n\r\n                    path[0] = strategyObj.token1;\r\n                    amounts = IRouter(strategyObj.liquidityRouter).getAmountsOut(_token1Value, path);\r\n                    strategyObj.totalCapital = amounts[1];\r\n                    totalCapital += strategyObj.totalCapital;\r\n                }\r\n            }\r\n        }\r\n        return totalCapital;\r\n    }\r\n\r\n    function addStrategy(\r\n        address _newStrategy,\r\n        uint256 _pid,\r\n        address _lpToken,\r\n        address _liquidityRouter,\r\n        uint256 _nameID) onlyOwner external {\r\n        require(_newStrategy != address(0), "newStrategy can not be a zero address");\r\n        require(_lpToken != address(0), "lpToken can not be a zero address");\r\n        require(_liquidityRouter != address(0), "liquidityRouter can not be a zero address");\r\n\r\n        _addStrategy(_newStrategy, _pid, _lpToken, _liquidityRouter, _nameID);\r\n    }\r\n\r\n    function addStrategyWOpid(\r\n        address _newStrategy,\r\n        address _lpToken,\r\n        address _liquidityRouter,\r\n        uint256 _nameID) onlyOwner external {\r\n        require(_newStrategy != address(0), "newStrategy can not be a zero address");\r\n        require(_lpToken != address(0), "lpToken can not be a zero address");\r\n        require(_liquidityRouter != address(0), "liquidityRouter can not be a zero address");\r\n\r\n        _addStrategy(_newStrategy, NONE_PID_VALUE, _lpToken, _liquidityRouter, _nameID);\r\n    }\r\n\r\n    function setGovernment(address _government) external onlyOwner {\r\n        require(_government != address(0), "The address of government can not be a zero address");\r\n        government = _government;\r\n    }\r\n\r\n    function withdrawTokensFee() onlyOwner public {\r\n        require(\r\n            _getBalanceOfToken(USDT) > 0,\r\n            "GrowthVault: USDT balance should be more then 0"\r\n        );\r\n        IERC20(USDT).transfer(msg.sender, totalFeeUSDT);\r\n        totalFeeUSDT = 0;\r\n    }\r\n\r\n    function earn() public {\r\n        _earn(farm, pid, _getBalanceOfToken(lpToken));\r\n    }\r\n\r\n    function autoCompound() public {\r\n        uint256 _nameID;\r\n        uint256 _amount;\r\n        address _cakeToken;\r\n        address[] memory path = new address[](2);\r\n        address[] memory path1 = new address[](3);\r\n        StrategyInfo memory strategyObj;\r\n        uint256[] memory amounts;\r\n        uint256 rewardsFeeInWETH;\r\n        uint256 rewardsFeeInCakes;\r\n        uint256 rewardBalance;\r\n        uint256 desired;\r\n        for (uint256 i; i < names.length; i++) {\r\n            _nameID = names[i];\r\n            strategyObj = strategyInfo[_nameID];\r\n\r\n            if(strategyObj.pid < NONE_PID_VALUE) {\r\n                _amount = _getAmountLPFromStrategy(strategyObj.farm, strategyObj.pid);\r\n            } else {\r\n                _amount = _getAmountLPFromStrategyWOpid(strategyObj.farm);\r\n            }\r\n            if (_amount > 0) {\r\n                _withdrawFromStrategy(_nameID, _amount);\r\n                _cakeToken = _getCakeToken(strategyObj.farm);\r\n\r\n                path[0] = _cakeToken;\r\n                path[1] = WETH;\r\n\r\n                rewardBalance = getAvalaibleCakes(_cakeToken);\r\n                IERC20(_cakeToken).safeApprove(strategyObj.liquidityRouter, 0);\r\n                IERC20(_cakeToken).safeApprove(strategyObj.liquidityRouter, type(uint256).max);\r\n\r\n                rewardsFeeInCakes = _calculateAmountFee(rewardBalance) + pendingFeeInCakes;\r\n                amounts = IRouter(strategyObj.liquidityRouter).getAmountsOut(rewardsFeeInCakes, path);\r\n                if(amounts[1] > 100) {\r\n                    IRouter(strategyObj.liquidityRouter).swapExactTokensForTokens(\r\n                        rewardsFeeInCakes,\r\n                        amounts[1] - (amounts[1]*toleranceLevelPercent)/100,\r\n                        path,\r\n                        address(this),\r\n                        block.timestamp+1 minutes\r\n                    );\r\n                    pendingFeeInCakes = 0;\r\n                } else {\r\n                    pendingFeeInCakes += rewardsFeeInCakes;\r\n                }\r\n\r\n                path[0] = WETH;\r\n                path[1] = USDT;\r\n                rewardsFeeInWETH = _getBalanceOfToken(WETH);\r\n                amounts = IRouter(strategyObj.liquidityRouter).getAmountsOut(rewardsFeeInWETH, path);\r\n                if(amounts[1] > 100) {\r\n                    IRouter(strategyObj.liquidityRouter).swapExactTokensForTokens(\r\n                        rewardsFeeInWETH,\r\n                        amounts[1] - (amounts[1]*toleranceLevelPercent)/100,\r\n                        path,\r\n                        address(this),\r\n                        block.timestamp+1 minutes\r\n                    );\r\n                    pendingFee = 0;\r\n                    totalFeeUSDT = _getBalanceOfToken(USDT);\r\n                } else {\r\n                    pendingFee += rewardsFeeInWETH;\r\n                }\r\n                \r\n                rewardBalance = getAvalaibleCakes(_cakeToken);\r\n\r\n                path1[0] = _cakeToken;\r\n                path1[1] = WETH;\r\n                path1[2] = _cakeToken;\r\n\r\n                amounts = IRouter(strategyObj.liquidityRouter).getAmountsOut(rewardBalance, path1);\r\n                if(amounts[1] > 100) {\r\n                    IRouter(strategyObj.liquidityRouter).swapExactTokensForTokens(\r\n                        rewardBalance,\r\n                        amounts[1] - (amounts[1]*toleranceLevelPercent)/100,\r\n                        path1,\r\n                        address(this),\r\n                        block.timestamp+1 minutes\r\n                    );\r\n                    amounts = IRouter(strategyObj.liquidityRouter).getAmountsOut(\r\n                        _getBalanceOfToken(strategyObj.token0), path);\r\n                    \r\n                    if(amounts[1] <= _getBalanceOfToken(strategyObj.token1)) {\r\n                        desired = amounts[1];\r\n                    } else {\r\n                        desired = _getBalanceOfToken(strategyObj.token1);\r\n                    }\r\n                    IERC20(strategyObj.token0).transfer(lpToken, _getBalanceOfToken(strategyObj.token0));\r\n                    IERC20(strategyObj.token1).transfer(lpToken, desired);\r\n                    IPair(lpToken).mint(address(this));\r\n                }\r\n                _earn(strategyObj.farm, strategyObj.pid, _getBalanceOfToken(strategyObj.lpToken));\r\n                \r\n                strategyObj.totalLP = _getAmountLPFromStrategy(strategyObj.farm, strategyObj.pid);\r\n                \r\n                // TODO: all other tokens to USDT ?\r\n            }\r\n        }\r\n        updateTotalCapital();\r\n        emit AutoCompound();\r\n    }\r\n\r\n    receive() external payable {\r\n        deposit();\r\n    }\r\n\r\n    function deposit() public payable {\r\n        autoCompound();\r\n        _approveTokens(token0, token1, liquidityRouter);\r\n        _addLiquidity(liquidityRouter, token0, token1);\r\n        earn();\r\n\r\n        // uint256 totalCapital = updateTotalCapital();\r\n        // uint256 percent = (msg.value * 100 * 1000) / (totalCapital);\r\n        // uint256 shares = percent * totalCapital / 1000;\r\n        // _mint(msg.sender, shares);\r\n\r\n        // // TODO: excessToUSDT(); ?\r\n        // emit DepositToVault(msg.value);\r\n    }\r\n\r\n    function withdraw(uint256 _shares) canWithdraw public {\r\n        uint256 totalCapital = updateTotalCapital();\r\n        // TODO: percent = (_shares/totalShares)*100\r\n        autoCompound();\r\n        uint256 percent = (_shares * 100 * 100)/(totalCapital * 100);\r\n        _burn(msg.sender, _shares);\r\n        _getYELs(percent);\r\n        uint256 _balance = _getBalanceOfToken(YELtoken);\r\n        IERC20(YELtoken).transfer(msg.sender, _balance);\r\n\r\n        emit WithdrawFromVault(_balance);\r\n    }\r\n\r\n    function migrate(address _contract) onlyOwnerOrGovernment public {\r\n        require(_contract != address(0), "The _contract can not be a zero address");\r\n        autoCompound();\r\n        (address _newLpToken, address _newliquidityRouter,,,,) = IGrowthVault(_contract).getCurrentStrategy();\r\n\r\n        _withdrawFromStrategies();\r\n\r\n        for (uint256 i; i < names.length; i++) {\r\n            _removeLiquidityAfterWithdraw(names[i]);\r\n        }\r\n\r\n        (address _token0, address _token1) = _getTokensFromLP(_newLpToken);\r\n        _addLiquidity(_token0, _token1, _newliquidityRouter);\r\n        IERC20(_newLpToken).transfer(_contract, _getBalanceOfToken(_newLpToken));\r\n        IGrowthVault(_contract).earn();\r\n    }\r\n\r\n    function partialMigrate(\r\n        uint256 _oldNameId,\r\n        uint256 _amount,\r\n        uint256 _newNameId) onlyOwnerOrGovernment public {\r\n        autoCompound();\r\n        require(nameExist[_oldNameId], "The _oldNameId value does not exist");\r\n        require(nameExist[_newNameId], "The _newNameId value does not exist");\r\n        require(_amount > 0, "The _amount value sould be more then ZERO");\r\n\r\n        // take LP from old strategy\r\n        _withdrawFromStrategy(_oldNameId, _amount);\r\n        // swap LP and Cakes to native Token\r\n        _removeLiquidityAfterWithdraw(_oldNameId);\r\n\r\n        StrategyInfo memory strategyObj = strategyInfo[_newNameId];\r\n\r\n        // get new LP for new strategy\r\n        _addLiquidity(strategyObj.liquidityRouter, strategyObj.token0, strategyObj.token1);\r\n        _earn(strategyObj.farm, strategyObj.pid, _getBalanceOfToken(strategyObj.lpToken));\r\n        emit PartialMigrate(_amount);\r\n    }\r\n\r\n    function _getTokensFromLP(address _lpToken) internal view returns (address, address) {\r\n        return (IPair(_lpToken).token0(), IPair(_lpToken).token1());\r\n    }\r\n\r\n    function _getBalanceOfToken(address _token) internal view returns (uint256) {\r\n        return IERC20(_token).balanceOf(address(this));\r\n    }\r\n\r\n    function _getAmountLPFromStrategy(address _farm, uint256 _pid) public view returns (uint256 amount) {\r\n        (amount,) = Ifarm(_farm).userInfo(_pid, address(this));\r\n    }\r\n\r\n    function _getAmountLPFromStrategyWOpid(address _farm) internal view returns (uint256 amount) {\r\n\r\n        IfarmWOpid.UserInfo memory info = IfarmWOpid(_farm).info(address(this));\r\n        return info.available;\r\n    }\r\n\r\n    function _withdrawFromStrategies() internal {\r\n        uint256 _amount;\r\n        StrategyInfo memory strategyObj;\r\n        for (uint256 i; i < names.length; i++) {\r\n            strategyObj = strategyInfo[names[i]];\r\n\r\n            if(strategyObj.pid < NONE_PID_VALUE) {\r\n                _amount = _getAmountLPFromStrategy(strategyObj.farm, strategyObj.pid);\r\n            } else {\r\n                _amount = _getAmountLPFromStrategyWOpid(strategyObj.farm);\r\n            }\r\n            _withdrawFromStrategy(names[i], _amount);\r\n        }\r\n    }\r\n\r\n    function _withdrawFromStrategy(uint256 _nameID, uint256 _amount) internal {\r\n        StrategyInfo memory strategyObj = strategyInfo[_nameID];\r\n        if(strategyObj.pid < NONE_PID_VALUE) {\r\n            Ifarm(strategyObj.farm).withdraw(strategyObj.pid, _amount);\r\n        }\r\n    }\r\n\r\n    function _calculateAmountAfterFee(uint256 amount) internal pure returns(uint256) {\r\n        /*\r\n        As the contract takes fee percent from the amount,\r\n        so amount needs to multiple by 100 and divide by 10000 to get correct percentage in solidity\r\n\r\n        example: amount = 50 LP, percent = 2%\r\n        fee calculates: 50 * 2 * 100 / 10000 or it is the same as 50 * 0.02\r\n        fee result: 1 LP\r\n        amount after fee calculates: amount - fee result\r\n        amount after fee result: 50 - 1 = 49 LP\r\n        */\r\n        return amount - _calculateAmountFee(amount);\r\n    }\r\n\r\n    function _calculateAmountFee(uint256 amount) internal pure returns(uint256) {\r\n        /*\r\n        As the contract takes fee percent from the amount,\r\n        so amount needs to multiple by 100 and divide by 10000 to get correct percentage in solidity\r\n\r\n        example: amount = 50 LP, percent = 2%\r\n        fee calculates: 50 * 2 * 100 / 10000 or it is the same as 50 * 0.02\r\n        fee result: 1 LP\r\n        */\r\n        return (amount * withdrawFee) / 100;\r\n    }\r\n\r\n    function _removeLiquidity(\r\n        uint256 _amount,\r\n        address _liquidityRouter,\r\n        address _token0,\r\n        address _token1) internal {\r\n        IRouter(_liquidityRouter).removeLiquidity(\r\n            _token0, // tokenA\r\n            _token1, // tokenB\r\n            _amount, // liquidity\r\n            0, // amountAmin\r\n            0,\r\n            address(this), // to \r\n            block.timestamp + 1 minutes // deadline\r\n        );\r\n        _swapTokensToNativeToken(_token0, _token1, _liquidityRouter);\r\n    }\r\n\r\n    function _addLiquidity(address _liquidityRouter, address _token0, address _token1) internal {\r\n        address[] memory path = new address[](2);\r\n        uint256[] memory amounts;\r\n        uint256 _balance = address(this).balance;\r\n        // (uint256 _reserve0, uint256 _reserve1,) = IPair(_lPtoken).getReserves();\r\n        path[0] = WETH;\r\n        uint256 desiredAmountToken;\r\n        uint256 desiredAmountETH = _balance / 2; // FTM, MATIC, ETH, BNB\r\n        // usdc ans spooky\r\n        if(_token0 != WETH) {\r\n            path[1] = _token0;\r\n            amounts = IRouter(_liquidityRouter).getAmountsOut(_balance, path);\r\n            desiredAmountToken = amounts[1] / 2;\r\n            IRouter(_liquidityRouter).swapExactETHForTokens{value:desiredAmountETH}(\r\n                desiredAmountToken - (desiredAmountToken*toleranceLevelPercent/100), // amountOutMin\r\n                path,\r\n                address(this),\r\n                block.timestamp + 1 minutes // deadline\r\n            );\r\n        }\r\n\r\n        if(_token1 != WETH) {\r\n            path[1] = _token1;\r\n            amounts = IRouter(_liquidityRouter).getAmountsOut(_balance, path);\r\n            desiredAmountToken = amounts[1] / 2;\r\n            IRouter(_liquidityRouter).swapExactETHForTokens{value:desiredAmountETH}(\r\n                desiredAmountToken - (desiredAmountToken*toleranceLevelPercent/100), // amountOutMin\r\n                path,\r\n                address(this),\r\n                block.timestamp + 1 minutes\r\n            );\r\n        }\r\n        // _approveTokens(_token0, _token1, _liquidityRouter);\r\n        if(_token1 != WETH && _token0 == WETH) {\r\n            desiredAmountToken = _getBalanceOfToken(_token1);\r\n            IRouter(_liquidityRouter).addLiquidityETH{value:desiredAmountETH}(\r\n                _token1,\r\n                desiredAmountToken,\r\n                desiredAmountToken - (desiredAmountToken*toleranceLevelPercent/100),\r\n                desiredAmountETH - (desiredAmountETH*toleranceLevelPercent)/100,\r\n                address(this),\r\n                block.timestamp + 1\r\n            );\r\n        } else if(_token1 == WETH && _token0 != WETH) {\r\n            desiredAmountToken = _getBalanceOfToken(_token0);\r\n            IRouter(_liquidityRouter).addLiquidityETH{value:desiredAmountETH}(\r\n                _token0,\r\n                desiredAmountToken,\r\n                desiredAmountToken - (desiredAmountToken*toleranceLevelPercent*100/(10000)),\r\n                desiredAmountETH - (desiredAmountETH*toleranceLevelPercent)/100,\r\n                address(this),\r\n                block.timestamp + 1\r\n            );\r\n        } else {\r\n            path[0] = _token0;\r\n            path[1] = _token1;\r\n\r\n            uint256 desired0 = _getBalanceOfToken(_token0);\r\n            uint256 balanceToken1 = _getBalanceOfToken(_token1);\r\n            amounts = IRouter(_liquidityRouter).getAmountsOut(desired0, path);\r\n            uint256 desired1;\r\n            if(amounts[1] <= balanceToken1) {\r\n                desired1 = amounts[1];\r\n            } else {\r\n                desired1 = balanceToken1;\r\n            }\r\n            IERC20(_token0).transfer(lpToken, desired0);\r\n            IERC20(_token1).transfer(lpToken, desired1);\r\n            IPair(lpToken).mint(address(this));\r\n        }\r\n\r\n\r\n        // ---------------\r\n        // uint256 ratio;\r\n        // uint256 dec0 = IERC20(_token0).decimals(); // 6\r\n        // uint256 dec1 = IERC20(_token1).decimals(); // 18\r\n        // uint256 decDiff = dec0 - dec1 ? dec0 >= dec1 : dec1 - dec0;\r\n        // decDiff = 1 ? decDiff == 0 : decDiff;\r\n\r\n        // if(_token0 == WETH) {\r\n        //     ratio = _reserve0 * 10*12 / _reserve1; // div for future by\r\n        // } else if (_token1 == WETH) { // ->>>>>\r\n        //     // 4024674337009544375369059 * 10 ** 12 / 10994611588736\r\n        //     /// FTM r / wUSDT r\r\n        //     ratioFTMperUSDT = (_reserve1 / decDiff) * 10 ** 12 / _reserve0; // 0.36605880112\r\n        //     // 366058801125\r\n        // }\r\n\r\n        // amountOfUSDT = msg.value / ratioFTMperUSDT; // TODO? 10 ** 12\r\n        // // 2 * 10 ** 18 / 0.36605880112\r\n        // desiredAmountFTM = 2 / 2; // FTM = 2 / 2\r\n        // desiredAmountUSDT = amountOfUSDT / 2;\r\n        // IRouter(_liquidityRouter).addLiquidityETH{value:desiredAmountFTM}(\r\n        //     USDT,\r\n        //     desiredAmountUSDT,\r\n        //     desiredAmountUSDT * (desiredAmountUSDT * toleranceLevelPercent)/100,\r\n        //     desiredAmountFTM * (desiredAmountFTM * toleranceLevelPercent)/100,\r\n        //     address(this),\r\n        //     block.timestamp + 1\r\n        // );\r\n\r\n    }\r\n\r\n    function _addStrategy(\r\n        address _newFarm,\r\n        uint256 _pid,\r\n        address _lpToken,\r\n        address _liquidityRouter,\r\n        uint256 _nameID) internal {\r\n        StrategyInfo storage strategyObj = strategyInfo[_nameID];\r\n        (address _token0, address _token1) = _getTokensFromLP(_lpToken);\r\n        strategyObj.liquidityRouter = _liquidityRouter;\r\n        strategyObj.lpToken = _lpToken;\r\n        strategyObj.pid = _pid;\r\n        strategyObj.farm = _newFarm;\r\n        strategyObj.token0 = _token0;\r\n        strategyObj.token1 = _token1;\r\n\r\n        if (!nameExist[_nameID]) {\r\n            names.push(_nameID);\r\n            nameExist[_nameID] = true;\r\n        }\r\n\r\n        _approveTokens(_token0, _token1, _liquidityRouter);\r\n    }\r\n\r\n    function _approveTokens(address _token0, address _token1, address _liquidityRouter) public {\r\n        IERC20(_token0).safeApprove(_liquidityRouter, 0);\r\n        IERC20(_token1).safeApprove(_liquidityRouter, 0);\r\n        IERC20(_token0).safeApprove(_liquidityRouter, type(uint256).max);\r\n        IERC20(_token1).safeApprove(_liquidityRouter, type(uint256).max);\r\n    }\r\n\r\n    function TEST_withdrawOwnersLP(address _farm, address _lpToken, uint256 _pid) public onlyOwner {\r\n        uint256 _totalLP = _getAmountLPFromStrategy(_farm, _pid);\r\n        Ifarm(_farm).withdraw(_pid, _totalLP);\r\n        IERC20(_lpToken).transfer(payable(msg.sender), _totalLP);\r\n    }\r\n\r\n    function TEST_withdrawBalance() public onlyOwner {\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n    function _earn(address _strategy, uint256 _pid, uint256 _amount) internal {\r\n        if(_pid < NONE_PID_VALUE) {\r\n            Ifarm(_strategy).deposit(_pid, _amount);\r\n        } else {\r\n            IfarmWOpid(_strategy).deposit(_amount);\r\n        }\r\n        emit Earn(_amount);\r\n    }\r\n\r\n    function _swapExactTokensForETH(uint256 _amount, address _liquidityRouter, address[] memory _path) internal {\r\n        uint256[] memory amounts = IRouter(_liquidityRouter).getAmountsOut(_amount, _path);\r\n        IRouter(_liquidityRouter).swapExactTokensForETH(\r\n            _amount,\r\n            amounts[1] - (amounts[1]*toleranceLevelPercent/100),\r\n            _path,\r\n            address(this),\r\n            block.timestamp + 1 minutes\r\n        );\r\n    }\r\n\r\n    function _swapExactETHForTokens(\r\n        uint256 _amountMin, uint256 _amount, address _liquidityRouter, address[] memory _path) private {\r\n\r\n        IRouter(_liquidityRouter).swapExactETHForTokens{value:_amount}(\r\n            _amountMin, _path, address(this), block.timestamp + 1 minutes\r\n        );\r\n    }\r\n\r\n    function _getCakeToken(address _strategy) internal view returns (address cake){\r\n        cake = Ifarm(_strategy).DINO();\r\n    }\r\n\r\n    function _getYELs(uint256 _percent) internal { \r\n        uint256 _nameID;\r\n        uint256 totalLP;\r\n        address cakeToken;\r\n        StrategyInfo memory strategyObj;\r\n        address[] memory path = new address[](2);\r\n        uint256 amountMin;\r\n\r\n        for (uint256 i; i < names.length; i++) {\r\n            _nameID = names[i];\r\n            strategyObj = strategyInfo[_nameID];\r\n            if(strategyObj.pid < NONE_PID_VALUE) {\r\n                totalLP = _getAmountLPFromStrategy(strategyObj.farm, strategyObj.pid);\r\n            } else {\r\n                totalLP = _getAmountLPFromStrategyWOpid(strategyObj.farm);\r\n            }\r\n            _withdrawFromStrategy(_nameID, (_percent * 100 * 100)/totalLP);\r\n            cakeToken = _getCakeToken(strategyObj.farm);\r\n            \r\n            path[0] = cakeToken;\r\n            path[1] = WETH;\r\n\r\n            _swapExactTokensForETH(_getBalanceOfToken(cakeToken), strategyObj.liquidityRouter, path);\r\n            _removeLiquidity(totalLP, strategyObj.liquidityRouter, strategyObj.token0, strategyObj.token1);\r\n\r\n            path[0] = strategyObj.token0;\r\n            path[1] = WETH;\r\n\r\n            if(strategyObj.token0 != WETH) {\r\n                _swapExactTokensForETH(_getBalanceOfToken(strategyObj.token0), strategyObj.liquidityRouter, path);\r\n            }\r\n\r\n            path[0] = strategyObj.token1;\r\n            if(strategyObj.token1 != WETH) {\r\n                _swapExactTokensForETH(_getBalanceOfToken(strategyObj.token1), strategyObj.liquidityRouter, path);\r\n            }\r\n\r\n            // swap to YEL\r\n            path[0] = WETH;\r\n            path[1] = YELtoken;\r\n            _swapExactETHForTokens(getAvalaibleWETH(), 0, yelLiquidityRouter, path);\r\n\r\n            // difference of percentage should be no more then 1%\r\n            // _percent == (percent of LP for farm swapped BNB / totalCapitalUsed) * 100 \r\n            // error: Shares do not match\r\n        }\r\n        emit YELswapped(_percent);\r\n    }\r\n\r\n    function getAvalaibleCakes(address _tokenReward) public view returns (uint256) {\r\n        return _getBalanceOfToken(_tokenReward) - pendingFeeInCakes;\r\n    }\r\n\r\n    function getAvalaibleWETH() public view returns (uint256) {\r\n        return _getBalanceOfToken(WETH) - pendingFee;\r\n    }\r\n\r\n    function _getAmountMin(\r\n        address _token,\r\n        address _tokenTo,\r\n        address _liquidityRouter,\r\n        address[] memory _path) internal view returns (uint256 amountMin) {\r\n\r\n        uint256 _amount = _getAmountOfToken(_token, _tokenTo, _liquidityRouter, _path);\r\n        amountMin = _amount - (_amount * toleranceLevelPercent*100)/(10000);\r\n    }\r\n\r\n    function _getAmountOfToken(\r\n        address _token,\r\n        address _tokenTo,\r\n        address _liquidityRouter,\r\n        address[] memory _path) public view returns (uint256) {\r\n        uint256 tokenRatio = (_getBalanceOfToken(_token) * 10**12)/IERC20(_token).totalSupply();\r\n        uint256 reserve = IERC20(_tokenTo).balanceOf(_liquidityRouter);\r\n        uint256 tokenValue = tokenRatio * reserve / 10**12;\r\n        uint256[] memory amounts = IRouter(_liquidityRouter).getAmountsOut(tokenValue, _path);\r\n        // return expected amount of _tokenTo\r\n        return amounts[1];\r\n    }\r\n\r\n    function _removeLiquidityAfterWithdraw(uint256 _nameId) internal {\r\n        StrategyInfo memory strategyObj = strategyInfo[_nameId];\r\n        uint256 _balance = _getBalanceOfToken(strategyObj.lpToken);\r\n        if(_balance > 0) {\r\n            _removeLiquidity(_balance, strategyObj.liquidityRouter, strategyObj.token0, strategyObj.token1);\r\n            address cakeToken = _getCakeToken(strategyObj.farm);\r\n            address[] memory path = new address[](2);\r\n            path[0] = cakeToken;\r\n            path[1] = WETH;\r\n            _swapExactTokensForETH(_getBalanceOfToken(cakeToken), strategyObj.liquidityRouter, path);\r\n        }\r\n    }\r\n\r\n    function _swapTokensToNativeToken(\r\n        address _token0, address _token1, address _liquidityRouter) internal {\r\n\r\n        address[] memory path = new address[](2);\r\n        uint256 amountMin;\r\n\r\n        path[1] = WETH;\r\n        if(_token0 != WETH) {\r\n            path[0] = _token0;\r\n            _swapExactTokensForETH(_getBalanceOfToken(_token0), _liquidityRouter, path);\r\n        }\r\n\r\n        if(_token1 != WETH) {\r\n            path[0] = _token1;\r\n            _swapExactTokensForETH(_getBalanceOfToken(_token1), _liquidityRouter, path);\r\n        }\r\n    }\r\n\r\n    function _setBaseAddresses(\r\n        address _newStrategy,\r\n        address _liquidityRouter,\r\n        address _lpToken,\r\n        uint256 _pid,\r\n        uint256 _nameID) internal {\r\n\r\n        lpToken = _lpToken;\r\n        liquidityRouter = _liquidityRouter;\r\n        pid = _pid;\r\n        nameID = _nameID;\r\n        farm = _newStrategy;\r\n        (token0, token1) = _getTokensFromLP(_lpToken);\r\n        IERC20(lpToken).safeApprove(farm, type(uint256).max);\r\n        _addStrategy(_newStrategy, _pid, _lpToken, _liquidityRouter, _nameID);\r\n    }\r\n\r\n    function _getRatioLP(\r\n        address _lPtoken, uint256 _amount) public view returns (uint256 LPRatio){\r\n        // LPRatio must be divided by (10**12)!\r\n        LPRatio = _amount * (10**12) / IPair(_lPtoken).totalSupply();\r\n    }\r\n\r\n    function _getReserves(\r\n        address _lPtoken) public view returns (uint256 reserve0, uint256 reserve1){\r\n        (reserve0, reserve1,) = IPair(_lPtoken).getReserves();\r\n    }\r\n\r\n    function _getTokenValues(\r\n        address _lpToken,\r\n        uint256 _amountLP) public view returns (uint256 token0Value, uint256 token1Value) {\r\n        \r\n        (uint256 _reserve0, uint256 _reserve1) = _getReserves(_lpToken);\r\n        uint256 LPRatio = _getRatioLP(_lpToken, _amountLP);\r\n        token0Value = LPRatio * _reserve0 / (10**12);\r\n        token1Value = LPRatio * _reserve1 / (10**12);\r\n    }\r\n\r\n    function transfer(address, uint256) public pure override returns (bool) {\r\n        revert("Transfer is not supporting for share tokens.");\r\n    }\r\n\r\n    function allowance(address, address) public pure override returns (uint256) {\r\n        revert("Allowance is not supporting for share tokens.");\r\n    }\r\n\r\n    function approve(address, uint256) public pure override returns (bool) {\r\n        revert("Approve is not supporting for share tokens.");\r\n    }\r\n\r\n    function transferFrom(address, address, uint256) public pure override returns (bool) {\r\n        revert("TransferFrom is not supporting for share tokens.");\r\n    }\r\n\r\n    function increaseAllowance(address, uint256) public pure override returns (bool) {\r\n        revert("IncreaseAllowance is not supporting for share tokens.");\r\n    }\r\n\r\n    function decreaseAllowance(address, uint256) public pure override returns (bool) {\r\n        revert("DecreaseAllowance is not supporting for share tokens.");\r\n    }\r\n}';

module.exports = polygonDataSol;
