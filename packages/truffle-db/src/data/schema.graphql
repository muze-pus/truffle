scalar Address
scalar NetworkID
scalar TransactionHash
scalar Value
scalar Bytes
scalar ABI
scalar Object
scalar AST
scalar ByteOffset
scalar FileIndex

type Project {
  contractType(name: String!): ContractType
  contractInstance(networkId: String!, name: String!): ContractInstance
}


type ContractInstance {
  address: Address!
  network: Network!
  callBytecode: Bytecode
  contractType: ContractType
  transactionHash: TransactionHash
  constructorArgs: [Value]
  linkValues: [LinkValue]
}

type ContractType {
  abi: ABI!
  name: String
  compilation: Compilation
  createBytecode: Bytecode
}

type Network {
  name: String
  networkID: NetworkID
}

type LinkValue {
  linkReference: LinkReference!
  value: Bytes
}

type LinkReference {
  offsets: [ByteOffset!]!
  length: Int!
}

type ContractTypes {
  contractTypes: [ContractType]!
}

type Bytecode {
  bytes: Bytes!
  sourceMap: String,
  instructions: [Instruction!],
  linkReferences: [LinkReference]
}

type Instruction {
  opcode: String!,
  programCounter: Int!,
  meta: InstructionMeta,
  sourceRange: SourceRange,
  pushData: Bytes
}

type InstructionMeta {
  cost: Int!,
  dynamic: Boolean!,

  # stack operations
  pops: Int!,
  pushes: Int!
}

type SourceRange {
  source: Source
  start: ByteOffset!
  length: Int!
  meta: SourceRangeMeta!
}

type Sources {
  source(index: FileIndex!): Source
}

type Source {
  sourcePath: String
  contents: String!
  ast: AST
}

type Compilation {
  compiler: Compiler!
  contractTypes: ContractTypes!
  sources: Sources!
}

type Compiler {
  name: String
  version: String
  settings: Object
}

type SourceRangeMeta {
  jump: JumpDirection
}

enum JumpDirection {
  IN
  OUT
}


type Query {
  truffleProject: Project!
}
